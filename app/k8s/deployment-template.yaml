apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: ${APP_NAME}-${ENV}
    env: ${ENV}
  name: ${APP_NAME}-${ENV}
  namespace: ${NAMESPAVCE}
spec:
  progressDeadlineSeconds: 600
  replicas: 2
  revisionHistoryLimit: 20
  selector:
    matchLabels:
      app: ${APP_NAME}-${ENV}
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: ${APP_NAME}-${ENV}
        env: ${ENV}
        pipeline_number: "${VERSION}"
    spec:
      # Uncomment and set the correct service account if needed
      serviceAccountName: sa-${APP_NAME}-${ENV}
      containers:
      - image: 447335552551.dkr.ecr.us-west-2.amazonaws.com/${APP_NAME}:${IMAGE_TAG}
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8000
        readinessProbe:
          httpGet:
            path: /healthz
            port: 8000
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 5
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8000
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 5        
        name: ${APP_NAME}-${ENV}
        envFrom:
        - configMapRef:
            name: ${APP_NAME}-${ENV}-config
        env:
        - name: PORT
          value: "8000"
        resources:
          # Uncomment and set the appropriate resource requests and limits if needed
          requests:
            memory: "200M"
            cpu: "250m"
          limits:
            memory: "400M"
            cpu: "500m"
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: ${APP_NAME}-${ENV}
  namespace: default
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: ${APP_NAME}-${ENV}
  minReplicas: 2
  maxReplicas: 15
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 70
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 0
      selectPolicy: Max
      policies:
        - type: Percent
          value: 100
          periodSeconds: 40
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
        - type: Percent
          value: 100
          periodSeconds: 15
  #https://overcast.blog/13-ways-to-optimize-kubernetes-horizontal-pod-autoscaler-bd5911683bb2
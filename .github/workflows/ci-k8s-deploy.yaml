name: 'CD/CI Build Ticketmas Develop Application EKS'
on:
  pull_request:
    types: [closed]
    branches:
      - develop
      - main
      - 'release/*'
      - 'feature/*'
      - 'hotfix/*'
  workflow_dispatch:
    inputs:
      environment:
        type: environment
        description: Select the environment
      # boolean:
      #   type: boolean
      #   description: True or False
      choice:
        type: choice
        description: Make a choice
        default: 'sandbox'
        options:
        - develop
        - qa
        - prod                
      set-version:
        description: 'Set existent version to deploy'
        required: false
        type: string  
  pull_request_review:
    types: [submitted]
  issue_comment:
    types: [created]

permissions:
  contents: read
  pull-requests: write
  id-token: write  
  checks: none    
jobs:
  # Job to create injectable configuration for nested jobs
  loadEnvs:
    name: 'Loading envs and configurations'
    runs-on: ubuntu-latest
    env:
      module_name: "k8s"
    strategy:
      fail-fast: true
    outputs:
      env: ${{ steps.set-envs.outputs.matrix_envs }}
      module_name: "${{ env.module_name }}"
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    # Create a JSON output to be used as a matrix to determine on which envs run the action
    - id: set-envs
      name: identify module envs
      run: |
        cd ${{ env.module_name }}
        envs=$( find . -maxdepth 1 -type d -and -not -name 'prod'  | cut -c 3-)
        module_envs=$(for i in $envs; do echo $i; done | jq -R . | jq -s -c .)
        echo "::set-output name=matrix_envs::${module_envs}"
  test:
    runs-on: ubuntu-latest
    needs: loadEnvs
    strategy:
      fail-fast: false
      matrix:
        env: "${{fromJSON(needs.loadEnvs.outputs.env)}}"
    defaults:
      run:
        shell: bash
        #working-directory: k8s/${{ matrix.env }}
    environment:
      name: "${{ matrix.env }}"
    steps:
      - uses: actions/checkout@v3
      - name: Clone Project && Build the Docker image
        run: |
          echo 'Inician la pruebas de la APP'
          echo 'phplint:'
          #vendor/bin/phplint ./
          #echo 'parallel-lint:'
          #vendor/bin/parallel-lint --exclude vendor .

  build:
    needs: [test,loadEnvs]
    #if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        env: "${{fromJSON(needs.loadEnvs.outputs.env)}}"
    defaults:
      run:
        shell: bash
        #working-directory: k8s/${{ matrix.env }}
    environment:
      name: "${{ matrix.env }}"
    steps:
      - uses: actions/checkout@v3
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: us-east-1
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          #role-external-id: ${{ secrets.AWS_ROLE_EXTERNAL_ID_V3 }}
          role-duration-seconds: 1200
          role-session-name: "tf-${{ github.actor }}"

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          mask-password: 'false'
      - name:  Build and Push image to Amazon ECR
        id: build
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: "${{ vars.APP }}"
          IMAGE_TAG: ${{ github.sha }}
        run: |
          echo This is the Repo ECR: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG-${{ matrix.env }} .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG-${{ matrix.env }}

  deploy:
    needs: [build,loadEnvs]
    if: github.event.pull_request.merged == true && github.ref == 'refs/heads/develop'
    # && github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        env: ['dev']
        #"${{fromJSON(needs.loadEnvs.outputs.env)}}"
    defaults:
      run:
        shell: bash
        working-directory: k8s/dev
    environment:
      name: "${{ matrix.env }}"
    steps:
      - uses: actions/checkout@v3
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: us-east-1
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          #role-external-id: ${{ secrets.AWS_ROLE_EXTERNAL_ID_V3 }}
          role-duration-seconds: 1200
          role-session-name: "tf-${{ github.actor }}"

      - name: EKS Auth
        id: set-eks-auth
        run: |
          ls -lt
          if [  ${{ matrix.env }} = "qa" ]; then
          token=$(aws eks get-token --cluster-name eks-goliiive-v3-dev --region us-east-1 | jq -r .status.token)
          host=$(aws eks describe-cluster --name eks-goliiive-v3-dev | jq -r .cluster.endpoint | cut -c 9- )
          cert=$(aws eks describe-cluster --name eks-goliiive-v3-dev | jq -r .cluster.certificateAuthority.data)
          else
          token=$(aws eks get-token --cluster-name eks-goliiive-v3-${{ matrix.env }} --region us-east-1 | jq -r .status.token)
          host=$(aws eks describe-cluster --name eks-goliiive-v3-${{ matrix.env }} | jq -r .cluster.endpoint | cut -c 9- )
          cert=$(aws eks describe-cluster --name eks-goliiive-v3-${{ matrix.env }} | jq -r .cluster.certificateAuthority.data)
          fi
          echo "::add-mask::$token"
          echo "::add-mask::$host"
          echo "::add-mask::$cert"
          echo "::set-output name=token::${token}"
          echo "::set-output name=host::${host}"
          echo "::set-output name=cert::${cert}"
          sed -i 's/\${IMAGE_TAG}/'"$GITHUB_SHA-${{ matrix.env }}"'/g' ../deployment.yaml
          VERSION=$GITHUB_SHA
          sed -i 's/\${RELEASE_VERSION}/'"$VERSION"'/g' ../deployment.yaml
          sed -i 's/\${ENV}/'"${{ matrix.env }}"'/g' ../deployment.yaml
          sed -i 's/\${APP}/'"${{ vars.APP }}"'/g' ../deployment.yaml
         
          if [  ${{ matrix.env }} = "prod" ]; then
             PREFIX="img"
          else
             PREFIX="img-${{ matrix.env }}"
          fi


          #kubectl delete cronjob goliiive-scheduler goliiive-sqs
          sed -i 's/\${MAX_PODS}/'"${{ vars.MAX_PODS }}"'/g' ../deployment.yaml
          sed -i 's/\${MIN_PODS}/'"${{ vars.MIN_PODS }}"'/g' ../deployment.yaml
          sed -i 's/\${PREFIX}/'"$PREFIX"'/g' ../deployment.yaml
          sed -i 's/\${ENV}/'"${{ matrix.env }}"'/g' ../service.yaml
          sed -i 's/\${APP}/'"${{ vars.APP }}"'/g' ../service.yaml

          sed -i 's/\${ENV}/'"${{ matrix.env }}"'/g'  ../cronjob-sqs.yaml
          sed -i 's/\${APP}/'"${{ vars.APP }}"'/g' ../cronjob-sqs.yaml
          sed -i 's/\${RELEASE_VERSION}/'"$VERSION"'/g' ../cronjob-sqs.yaml
          sed -i 's/\${IMAGE_TAG}/'"$GITHUB_SHA-${{ matrix.env }}"'/g'  ../cronjob-sqs.yaml

      - name: Run Kubectl Delete Pod Queues and Scheduler
        uses: actions-hub/kubectl@master
        env:
          KUBE_TOKEN: ${{ steps.set-eks-auth.outputs.token }}
          KUBE_HOST: ${{ steps.set-eks-auth.outputs.host }}
          KUBE_CERTIFICATE: ${{ steps.set-eks-auth.outputs.cert }}
        with:
          args: delete
            --namespace=ticketmas
            -f k8s/cronjob-sqs.yaml
    
      - name: Run Kubectl apply
        uses: actions-hub/kubectl@master
        env:
          KUBE_TOKEN: ${{ steps.set-eks-auth.outputs.token }}
          KUBE_HOST: ${{ steps.set-eks-auth.outputs.host }}
          KUBE_CERTIFICATE: ${{ steps.set-eks-auth.outputs.cert }}
        with:
          args: apply
            --namespace=ticketmas
            -f k8s/deployment.yaml
            -f k8s/service.yaml
            -f k8s/cronjob-sqs.yaml
            -f k8s/${{ matrix.env }}/configmap.yaml

            #All environments deployment.yaml
  #deploy-qa:
  #  needs: [build,loadEnvs]
  #  #if: github.ref == 'refs/heads/main' && github.event_name == 'push'
  #  runs-on: ubuntu-latest
  #  #if:
  #  #  contains('
  #  #    refs/heads/qa
  #  #  ', github.ref)
  #  strategy:
  #    fail-fast: false
  #    matrix:
  #        env: ['qa']
  #  defaults:
  #    run:
  #      shell: bash
  #      working-directory: k8s/qa
  #  environment:
  #    name: "qa"
  #  steps:
  #    - uses: actions/checkout@v3
  #    - name: Configure AWS Credentials
  #      uses: aws-actions/configure-aws-credentials@v1
  #      with:
  #        aws-region: us-east-1
  #        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_V3 }}
  #        aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY_V3 }}
  #        role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME_V3 }}
  #        role-external-id: ${{ secrets.AWS_ROLE_EXTERNAL_ID_V3 }}
  #        role-duration-seconds: 1200
  #        role-session-name: "tf-${{ github.actor }}"
#
  #    - name: EKS Auth
  #      id: set-eks-auth
  #      run: |
  #        ls -lt
  #        if [  ${{ matrix.env }} = "qa" ]; then
  #        token=$(aws eks get-token --cluster-name eks-goliiive-v3-dev --region us-east-1 | jq -r .status.token)
  #        host=$(aws eks describe-cluster --name eks-goliiive-v3-dev | jq -r .cluster.endpoint | cut -c 9- )
  #        cert=$(aws eks describe-cluster --name eks-goliiive-v3-dev | jq -r .cluster.certificateAuthority.data)
#
#
  #        ############################# QA
  #        sed -i 's/\${IMAGE_TAG}-${{ matrix.env }}/'"$GITHUB_SHA"'/g' ../qa/deployment.yaml
  #        VERSION=$GITHUB_SHA
  #        sed -i 's/\${RELEASE_VERSION}/'"$VERSION"'/g' ../qa/deployment.yaml
  #        sed -i 's/\${ENV}/'"${{ matrix.env }}"'/g' ../qa/deployment.yaml
  #        sed -i 's/\${APP}/'"${{ vars.APP }}"'/g' ../qa/deployment.yaml
  #        ############################# QA
#
  #        if [  ${{ matrix.env }} = "prod" ]; then
  #           PREFIX="img"
  #        else
  #           PREFIX="img-${{ matrix.env }}"
  #        fi
#
  #        echo $PREFIX
#
  #        sed -i 's/\${PREFIX}/'"$PREFIX"'/g' ../deployment.yaml
  #        sed -i 's/\${ENV}/'"${{ matrix.env }}"'/g' ../service.yaml
  #        sed -i 's/\${APP}/'"${{ vars.APP }}"'/g' ../service.yaml
#
  #        sed -i 's/\${ENV}/'"${{ matrix.env }}"'/g'  ../cronjob-sqs.yaml
  #        sed -i 's/\${APP}/'"${{ vars.APP }}"'/g' ../cronjob-sqs.yaml
  #        sed -i 's/\${RELEASE_VERSION}/'"$VERSION"'/g' ../cronjob-sqs.yaml
  #        sed -i 's/\${IMAGE_TAG}/'"$GITHUB_SHA"'/g'  ../cronjob-sqs.yaml
#
  #        else
  #        token=$(aws eks get-token --cluster-name eks-goliiive-v3-${{ matrix.env }} --region us-east-1 | jq -r .status.token)
  #        host=$(aws eks describe-cluster --name eks-goliiive-v3-${{ matrix.env }} | jq -r .cluster.endpoint | cut -c 9- )
  #        cert=$(aws eks describe-cluster --name eks-goliiive-v3-${{ matrix.env }} | jq -r .cluster.certificateAuthority.data)
  #        fi
  #        echo "::add-mask::$token"
  #        echo "::add-mask::$host"
  #        echo "::add-mask::$cert"
  #        echo "::set-output name=token::${token}"
  #        echo "::set-output name=host::${host}"
  #        echo "::set-output name=cert::${cert}"
#
#
  #    - name: Run Kubectl apply
  #      uses: actions-hub/kubectl@master
  #      env:
  #        KUBE_TOKEN: ${{ steps.set-eks-auth.outputs.token }}
  #        KUBE_HOST: ${{ steps.set-eks-auth.outputs.host }}
  #        KUBE_CERTIFICATE: ${{ steps.set-eks-auth.outputs.cert }}
  #      with:
  #        args: apply
  #          --namespace=default
  #          -f k8s/service.yaml
  #          -f k8s/cronjob-sqs.yaml
  #          -f k8s/${{ matrix.env }}/configmap.yaml
  #          -f k8s/qa/deployment.yaml
  #          #All environments deployment.yaml
#
# #goliiive-core-qa-13e9c3568db638df.elb.us-east-1.amazonaws.com
